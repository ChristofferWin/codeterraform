name: 'Test_terraform_module.yml'

on:
  push:
    branches: 
      -  main
    paths:
      - 'terraform projects/modules/**'


env: 
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{vars.ARM_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{vars.ARM_TENANT_ID}}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Find_module_path
      id: changed-files
      uses: tj-actions/changed-files@v42
      with:
        since_last_remote_commit: true
    
    - name: List all changed files
      id: filtered-changed-files
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      shell: pwsh
      run: |
        $FinalPaths = @()
        foreach ($Path in $env:ALL_CHANGED_FILES) {
            if ($Path -like "*.tftest.hcl" -or $Path -like "*/modules/test*.tf") {
                $FinalPaths += (Get-ChildItem -Path $Path).DirectoryName -Replace ".*/codeterraform", "."
            }
            elseif ($Path -like "*.tf") {
                $Files = Get-ChildItem -Path "./terraform projects/modules/test modules" -Recurse | Where-Object { $_.Name -like "*.tf" }
                foreach ($File in $Files) {
                    $Content = Get-Content -Path $File.FullName
                    foreach ($Line in $Content) {
                        if ($Line -like "*source*$($Path.Split("/")[-2])*") {
                            $FinalPaths += $File.DirectoryName -Replace ".*/codeterraform", "."
                        }
                    }
                }
            }
        }
        $FinalPaths = $FinalPaths | % {$_ -Replace ".*/codeterraform", "."} | Select-Object -Unique
        Write-Output "The following files will be run by the pipeline to test:"
        foreach($Path in $FinalPaths){
          $Path
        }
        echo "::set-output name=FinalPaths::$FinalPaths"

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      shell: pwsh
      env:
        TF_PATH: ${{ steps.filtered-changed-files.outputs.FinalPaths }}
      run: |
            $BaseDirectory = (Get-Location).Path
            $Paths = ($env:TF_PATH -split '(?<=\S)(?=\s*\./)').Trim()
            foreach($Path in $Paths){
              cd $Path
              Write-Output "At location: $Path"
              terraform init
              cd $BaseDirectory
            }

    # Generates an execution plan for Terraform
    - name: Terraform Test
      shell: pwsh
      env:
        TF_PATH: ${{ steps.filtered-changed-files.outputs.FinalPaths }}
      run: |
            $BaseDirectory = (Get-Location).Path
            $Paths = ($env:TF_PATH -split '(?<=\S)(?=\s*\./)').Trim()

            Install-Module -Name Get-AzVMSku -Force
            [securestring]$secStringPassword = ConvertTo-SecureString $env:ARM_CLIENT_SECRET -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential ($env:ARM_CLIENT_ID, $secStringPassword)
            Connect-AzAccount -ServicePrincipal -TenantId $env:ARM_TENANT_ID -Credential $Credential -Subscription $env:ARM_SUBSCRIPTION_ID | Out-Null

            foreach($Path in $Paths){
              cd $Path
              Write-Output "At location: $Path"
              terraform test
              cd $BaseDirectory
            }