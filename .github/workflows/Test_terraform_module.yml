# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Test_terraform_module.yml'

on:
  push:
    branches: 
      -  main


env: 
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{vars.ARM_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{vars.ARM_TENANT_ID}}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Find_module_path
      id: changed-files
      uses: tj-actions/changed-files@v42
      with:
        since_last_remote_commit: true
    
    - name: List all changed files
      id: filtered-changed-files
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      shell: pwsh
      run: |
        $FinalPaths = @()
        foreach ($Path in $env:ALL_CHANGED_FILES) {
            if ($Path -like "*.tftest.hcl" -or $Path -like "*/modules/test*.tf") {
                $FinalPaths += (Get-ChildItem -Path $Path).DirectoryName -Replace ".*/codeterraform", "."
            }
            elseif ($Path -like "*.tf") {
                $Files = Get-ChildItem -Path "./terraform projects/modules/test modules" -Recurse | Where-Object { $_.Name -like "*.tf" }
                foreach ($File in $Files) {
                    $Content = Get-Content -Path $File.FullName
                    foreach ($Line in $Content) {
                        if ($Line -like "*source*$($Path.Split("/")[-2])*") {
                            $FinalPaths += $File.DirectoryName -Replace ".*/codeterraform", "."
                        }
                    }
                }
            }
        }
        $FinalPaths = $FinalPaths | % {$_ -Replace ".*/codeterraform", "."} | Select-Object -Unique
        foreach($Path in $FinalPaths){

        }
        foreach($Element in $FinalPaths){
          echo "::set-output name=FinalPaths::$Element"
        }
        

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      shell: pwsh
      env:
        TF_PATH: ${{ steps.filtered-changed-files.outputs.FinalPaths }}
      run: |
           echo $env:TF_PATH

    # Generates an execution plan for Terraform
    - name: Terraform Test
      shell: pwsh
      env:
        TF_PATH: ${{ steps.filtered-changed-files.outputs.FinalPaths }}
      run: |
            foreach($Item in $env:TF_PATH){
            cd $Item
            ls
            terraform test -var="script_name=$Item/Get-AzVMSKu.ps1"
            }